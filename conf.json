// Up-to-date sample config file can be found at
// https://github.com/MrKleiner/bootlegger

// Config files for bootlegger can have LINE comments, BUT NOT additive comments:
// Good: // comment
// Bad:  {"mdn": "link"}, // link to MDN

// Regular slashes in file paths are allowed and encouraged:
// C:/custom/pepega/pepega/mods

// Every key is first checked for truthiness
// Only then is it treated further

// It's possible to only keep mandatory cfg keys
// and the ones you need. Everything has defaults

// ALL KEYS ARE CASE-SENSITIVE

{
	// Names cannot contain spaces or any other special characters,
	// that are impossible to use as variable names in javascript.
	// Can either be relative or absolute.
	// The required structure is:
	// - root_folder
	// 		- module_name
	//		- module_name
	//		- module_name
	//			- file1.js
	//			- file2.js
	//			- file1.css
	//			- file2.css
	//		- module_name
	
	// Default to 'modules'
	"jsmodules": "",

	// Path to the root folder containing
	// modules folder, variables, fonts, etc.
	// All path fields are resolved in a smart way:
	// 1 - Check if it's absolute and exists already.
	// 2 - Try checking relative to the project
	//     if project was specified.
	// 3 - Try checking relative to config file, if possible.
	"project": "",

	// Target dir with compiled modules.
	// auto = use source modules dir name.
	// Cannot be the same as modules source name.
	// Default to modules src dir name.
	"writename": "",

	// This is ignored if writename is specified.
	// If writename is not specified, then this suffix is added 
	// to the name of the folder containing compiled modules.
	// Default (when applicable) to '_c'.
	"writesuffix": "",

	// A very basic js deflator:
	// 0: Do nothing
	// 1: remove lines which start with //
	// 2: 1 + also remove empty lines
	// Default to 0
	"simplify": 2,

	// Function pool name (where to store all the functions)
	// Default to __bootlegger (when falsy)
	"sys_name": "__bootlegger",

	// Combine all the files of the same type per module
	// into a single file named after module's name
	"collapse_modules": false,

	// Easy font management.
	"fonts": {
		// Whether to execute this or not
		"do_fonts": true,

		// Should point to a folder with a number of subfolders,
		// where each file is a font:
		// weight.style.ttf/woff/whatever
		// e.g. 400.italic.ttf
		// + super_fonts
		// |
		// +--+ Roboto
		// |  |
		// |  +--+ 200.normal.ttf
		// |     + 200.italic.ttf
		// |     + 300.normal.ttf
		// |     + 300.italic.ttf
		// |
		// +--+ Montserrat
		//    |
		//    +--+ 200.normal.ttf
		//       + 200.italic.ttf
		//       + 300.normal.ttf
		//       + 300.italic.ttf

		// Folder name is used as the font family name.
		// Add a file called font.manual to the font folder
		// to skip its evaluation, but not sync.
		"src_dir": "",

		// Path to a file where to write the resulting css fonts index.
		// Default to 'font_index.css' and written next to the fonts dir.
		// If specified - must include file name, such as:
		// css_data/fnt_idx.css
		// or just 'fnt_idx.css'
		"output_tgt": "",

		// HTTP source URL prefix
		// Default to output target tree
		"url_prefix": ""
	},

	// Configure this to collapse the entire project
	// into a single file.
	"onefile": {
		// Whether to perform this step or not
		// Default to false
		"do_onefile": false,

		// true = only generate onefile
		"onefile_only": false,

		// Where to put the compiled onefile thing.
		// IF falsy - the file is being output
		// to the root directory of the modules folder.
		// Default to 'compound.js'.
		// If specified - must include file name, such as:
		// compiled_data/special/pepega_comp.js
		// or just 'pepega_comp.js'
		"output_tgt": false,

		// Path to the file to use as the header of the entire file
		"file_header": "file_header.js",

		// Build the resulting file according to the following scenario.
		// SingleFile consists of:
		//     Hardcoded data:
		//         - File header
		//         - Libs, binary fonts, css, variables
		//     Tweakable sequence of abstract files
		//     and the composite modules data.

		// If no ?main is defined - it's added in the end of everything else.
		// Subsequent duplicates of ?main are ignored.
		"scenario": [
			// Abstract file
			{
				// Target data.
				// Must be present.
				"target": "code_header.js",
				// Whether to wrap the contents of the target file into
				// (function() { })(); or not.
				// Default to False.
				"wrap": false,
				// Whether to process the contents of the file the same
				// way as module files or not.
				// Default to False.
				"process": false
			},
			// The '?' doesn't mean anything, it's only there
			// for easier identification of built-in names.
			{
				// Mandatory
				"target": "?main",
				// Doesn't has to be present. Ignored if present.
				"wrap": false,
				// Doesn't has to be present. Ignored if present.
				"process": false
			},
			// Abstract file, same as "code_header.js"
			{
				"target": "code_footer.js",
				"wrap": false,
				"process": false
			}
		],

		// whether to sign libraries with their folder names or not
		"sign_libs": true,

		// whether to include beautiful ascii shite or not
		// default to True
		"art": true,

		// Folder containing folders with libraries to include in the file
		// only counts if present, not false, not empty and not null
		"libs": null,

		// Should contain subpaths to the libraries,
		// such as "jquery/3_6_0/jquery.min.js"
		
		// This option is additive: Entries present in this array will be ignored
		// when traversing through the "libs" parameter
		
		// The root of the subpath will be used as the library name
		// ignored if invalid
		"libs_order": [],

		// Explicitly define the module order.
		// The specified modules are put in order
		// and then remaining unspecified modules are added.
		// If module does not exist - ignore.
		"module_order": [],

		// A list of external libraries to include.
		// Useful when including libraries from arbitrary folders on your PC
		// or from HTTP sources.
		// HTTP sources require 'requests' library (pip install requests).
		"add_libs": [
			{
				// url OR file
				"type": "url",
				"src": "https://cdn.jsdelivr.net/gh/MrKleiner/liz3_toybox_webtools@latest/sex_toys/shared/toolbox.min.js",
				"name": "lzrd"
			}
		],

		// Include fonts as binaries.
		// Default to false
		"bin_fonts": false,

		// Store file contents as variables.
		// Should point to a folder where each file:
		// location.location.varname.text/bytes/bytes_raw/json.ext(any extension)
		// location is relative to const btg = {}
		"variables": "",

		// Whether to wrap every file in the module in
		// anonymous self executing function or not
		"separate_module_files": false
	},

	"sync": {
		// full address including http or whatever
		"dest": "http://192.168.1.118:7666",

		// location on remote destination where to put all the synced files
		// has to be an absolute and existing path
		"loc": "C:/custom/btg_dest_test",

		// path to a json containing access passwords
		"authdb": "",

		// password
		"auth": "demomesa",

		// whether to sync precessed modules or not
		// default to true
		"sync_mods": true,

		// additional folders/files to sync
		"payload":[
			"libs",
			"beauty",
			"vars",
			"pepega.pwned.js"
		]
	}
}





